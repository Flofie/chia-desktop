{"version":3,"sources":["components/AddDialog/AddDialog.tsx"],"names":["useStyle","makeStyles","root","display","flexDirection","config","fullNode","port","crtName","keyName","wallet","harvester","chiaExplorer","AddDialog","props","open","toggleOpen","type","classes","useState","name","host","crt","key","state","setState","handleInputChange","event","localState","target","value","handleOnClose","capitalize","string","charAt","toUpperCase","slice","onClose","aria-labelledby","id","variant","className","noValidate","autoComplete","label","required","margin","onChange","style","placeholder","flex","marginRight","defaultValue","multiline","rows","onClick","color","startIcon"],"mappings":"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","file":"static/js/4.f4edcf51.chunk.js","sourcesContent":["import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { Clear, Save } from '@material-ui/icons';\r\nimport React, { FC, useState } from 'react';\r\n\r\nexport interface AddDialogProps {\r\n  open: boolean;\r\n  toggleOpen: (connection?: Connection) => void;\r\n  type: ConnectionType;\r\n}\r\n\r\nconst useStyle = makeStyles({\r\n  root: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n});\r\n\r\nconst config: Record<\r\n  string,\r\n  { port?: number; crtName: string; keyName: string }\r\n> = {\r\n  fullNode: {\r\n    port: 8555,\r\n    crtName: 'private_full_node.crt',\r\n    keyName: 'private_full_node.key',\r\n  },\r\n  wallet: {\r\n    port: 9256,\r\n    crtName: 'private_wallet.crt',\r\n    keyName: 'private_wallet.key',\r\n  },\r\n  harvester: {\r\n    port: 8560,\r\n    crtName: 'private_harvester.crt',\r\n    keyName: 'private_harvester.key',\r\n  },\r\n  chiaExplorer: {\r\n    crtName: 'First wallet address',\r\n    keyName: 'Pool public key',\r\n  },\r\n};\r\n\r\nexport type ConnectionType =\r\n  | 'fullNode'\r\n  | 'wallet'\r\n  | 'harvester'\r\n  | 'chiaExplorer';\r\n\r\nexport interface Connection {\r\n  name: string;\r\n  host: string;\r\n  port: number | undefined;\r\n  crt: string;\r\n  key: string;\r\n  type: ConnectionType;\r\n}\r\n\r\nconst AddDialog: FC<AddDialogProps> = (props) => {\r\n  const { open, toggleOpen, type } = props;\r\n  const classes = useStyle();\r\n  const [state, setState] = useState<Connection>({\r\n    name: '',\r\n    host: '',\r\n    port: config[type]?.port,\r\n    crt: '',\r\n    key: '',\r\n    type,\r\n  });\r\n  const handleInputChange = (event) => {\r\n    setState((localState) => ({\r\n      ...localState,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n  };\r\n  const handleOnClose = () => {\r\n    toggleOpen();\r\n  };\r\n  function capitalize(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  const renderHeaderText = () => {\r\n    if (props.type === 'chiaExplorer') {\r\n      return (\r\n        <>\r\n          Since there is now way right now to get the farmer/pool public key via\r\n          the RPC API, we need to add the connection manually. If its possible\r\n          to get these information from the RPC API we can use the information\r\n          directly.\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          If your {capitalize(type)} is not running on the same machine as{' '}\r\n          <i>chia-desktop</i> then change the configuration in config.yaml{' '}\r\n          <b>self_hostname</b> to the <b>internal</b> IP-Address (e.g.\r\n          192.168.2.100) of your {capitalize(type)}.\r\n        </>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <Dialog open={open} onClose={handleOnClose} aria-labelledby=\"dialog-title\">\r\n      <DialogTitle id=\"dialog-title\">Add {capitalize(type)}</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"subtitle2\">{renderHeaderText()}</Typography>\r\n        <form className={classes.root} noValidate autoComplete=\"off\">\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label=\"Name\"\r\n            variant=\"outlined\"\r\n            required\r\n            margin=\"dense\"\r\n            name=\"name\"\r\n            value={state.name}\r\n            onChange={handleInputChange}\r\n          />\r\n          {props.type !== 'chiaExplorer' && (\r\n            <div style={{ display: 'flex' }}>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Hostname/IP-Address\"\r\n                placeholder=\"localhost\"\r\n                variant=\"outlined\"\r\n                margin=\"dense\"\r\n                style={{ flex: 1, marginRight: 10 }}\r\n                required\r\n                name=\"host\"\r\n                value={state.host}\r\n                onChange={handleInputChange}\r\n              />\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                label=\"Port\"\r\n                variant=\"outlined\"\r\n                defaultValue=\"8855\"\r\n                margin=\"dense\"\r\n                required\r\n                name=\"port\"\r\n                value={state.port}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label={config[type].crtName}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            multiline={props.type === 'chiaExplorer' ? false : true}\r\n            rows={props.type === 'chiaExplorer' ? 1 : 4}\r\n            required\r\n            name=\"crt\"\r\n            value={state.crt}\r\n            onChange={handleInputChange}\r\n          />\r\n          <TextField\r\n            id=\"outlined-basic\"\r\n            label={config[type].keyName}\r\n            variant=\"outlined\"\r\n            margin=\"dense\"\r\n            multiline={props.type === 'chiaExplorer' ? false : true}\r\n            rows={props.type === 'chiaExplorer' ? 1 : 4}\r\n            required\r\n            name=\"key\"\r\n            value={state.key}\r\n            onChange={handleInputChange}\r\n          />\r\n        </form>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleOnClose} color=\"primary\" startIcon={<Clear />}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={() => toggleOpen(state)}\r\n          color=\"primary\"\r\n          startIcon={<Save />}\r\n        >\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AddDialog;\r\n"],"sourceRoot":""}